// MOCK OPEA SERVICES - REPLACE WITH ACTUAL OPEA API/SDK CALLS

const mockOpeaSTT = async (audioDataReference) => {
  console.log(`[MOCK OPEA STT] Processing audio: ${audioDataReference}`);
  await new Promise((resolve) =>
    setTimeout(resolve, 1500 + Math.random() * 1000)
  );
  const timestamp = new Date().toLocaleTimeString();
  const speakers = ["Alice", "Bob", "Charlie", "Dana"];
  const randomSpeaker = speakers[Math.floor(Math.random() * speakers.length)];
  const sentences = [
    "This is a simulated transcript line from OPEA STT.",
    "Indeed, it's quite fascinating what OPEA can do.",
    "We should discuss the quarterly projections next.",
    "Can someone take a note of that action item?",
    "The latest OPEA models show promising results for enterprise AI.",
    "Let's circle back on the integration plan tomorrow.",
  ];
  return [
    {
      speaker: randomSpeaker,
      timestamp,
      text: sentences[Math.floor(Math.random() * sentences.length)],
    },
  ];
};

const mockOpeaSummarizer = async (fullTranscriptText) => {
  console.log("[MOCK OPEA Summarizer] Generating summary...");
  await new Promise((resolve) => setTimeout(resolve, 2000));
  const summaryEndings = [
    "Key decisions revolved around resource allocation and timeline adjustments.",
    "The main outcome was an agreement on the next phase of the project.",
    "Several critical issues were identified, requiring immediate attention.",
  ];
  return `This is an AI-generated summary of the meeting. ${
    summaryEndings[Math.floor(Math.random() * summaryEndings.length)]
  } (Generated by Mock OPEA Summarizer for: ${fullTranscriptText.substring(
    0,
    30
  )}...)`;
};

const mockOpeaActionItemExtractor = async (fullTranscriptText) => {
  console.log("[MOCK OPEA Action Item Extractor] Extracting action items...");
  await new Promise((resolve) => setTimeout(resolve, 1000));
  const tasks = [
    {
      task: "Alice to finalize the Q3 report and circulate by EOD Friday.",
      assignedTo: "Alice",
    },
    {
      task: "Bob to research alternative OPEA deployment strategies for cost optimization.",
      assignedTo: "Bob",
    },
    {
      task: "Charlie to schedule a follow-up meeting with the stakeholders next week.",
      assignedTo: "Charlie",
    },
    {
      task: "Dana to prepare the presentation slides for the upcoming client demo.",
      assignedTo: "Dana",
    },
  ];
  const numItems = Math.floor(Math.random() * 2) + 1; // 1 or 2 items
  let selectedItems = [];
  for (let i = 0; i < numItems; i++) {
    selectedItems.push({
      ...tasks[Math.floor(Math.random() * tasks.length)],
      id: `ai-${Date.now() + i}`,
      status: "pending",
    });
  }
  return selectedItems;
};

const mockOpeaAgendaGenerator = async (topic, participants) => {
  console.log(
    `[MOCK OPEA Agenda Generator] Generating agenda for topic: ${topic}`
  );
  await new Promise((resolve) => setTimeout(resolve, 1000));
  const points = [
    "Review of last meeting's action items",
    "Deep dive into " + (topic || "the main subject"),
    "Brainstorming session for new initiatives",
    "Discussion on OPEA integration challenges",
    "Planning next steps and assigning responsibilities",
  ];
  let agendaContent = `### Suggested Agenda for "${topic}"\nParticipants: ${participants.join(
    ", "
  )}\n\n`;
  for (let i = 0; i < 3; i++) {
    // Generate 3 random points
    agendaContent += `${i + 1}. **${
      points[Math.floor(Math.random() * points.length)]
    } (${Math.floor(Math.random() * 10 + 5)} min)**\n`;
  }
  agendaContent += `\n*(Generated by Mock OPEA Agenda Service)*`;
  return agendaContent;
};

module.exports = {
  mockOpeaSTT,
  mockOpeaSummarizer,
  mockOpeaActionItemExtractor,
  mockOpeaAgendaGenerator,
};
// const fetch = require("node-fetch"); // npm install node-fetch

// const OLLAMA_API_URL = "http://localhost:11434/api/generate"; // या /api/chat अगर मॉडल चैट के लिए फाइन-ट्यून है
// const OLLAMA_MODEL = "deepseek-r1:1.5b"; //
// async function generateWithOllama(
//   prompt,
//   systemMessage = "You are a helpful assistant."
// ) {
//   try {
//     const response = await fetch(OLLAMA_API_URL, {
//       method: "POST",
//       headers: {
//         "Content-Type": "application/json",
//       },
//       body: JSON.stringify({
//         model: OLLAMA_MODEL,
//         prompt: prompt,
//         system: systemMessage, // कुछ मॉडल 'system' प्रॉम्प्ट को सपोर्ट करते हैं
//         stream: false, // true करने पर स्ट्रीमिंग रिस्पांस मिलेगा
//       }),
//     });

//     if (!response.ok) {
//       const errorBody = await response.text();
//       throw new Error(`Ollama API error: ${response.status} ${errorBody}`);
//     }

//     const data = await response.json();
//     return data.response.trim(); // Ollama का रिस्पांस स्ट्रक्चर देखें
//   } catch (error) {
//     console.error("[Ollama] Error:", error.message);
//     throw error; //
//   }
// }

// const realOpeaSummarizer = async (fullTranscriptText) => {
//   console.log("[Ollama Summarizer] Generating summary...");
//   if (!fullTranscriptText || fullTranscriptText.trim() === "") {
//     return "Cannot summarize empty transcript.";
//   }
//   const prompt = `Please summarize the following meeting transcript:\n\n${fullTranscriptText}`;
//   try {
//     const summary = await generateWithOllama(
//       prompt,
//       "You are an expert meeting summarizer."
//     );
//     console.log("[Ollama Summarizer] Summary generated.");
//     return summary;
//   } catch (error) {
//     return `Summary generation failed. (For: ${fullTranscriptText.substring(
//       0,
//       30
//     )}...)`;
//   }
// };

// const realOpeaActionItemExtractor = async (fullTranscriptText) => {
//   console.log("[Ollama Action Item Extractor] Extracting action items...");
//   if (!fullTranscriptText || fullTranscriptText.trim() === "") return [];

//   //
//   const prompt = `
//     From the following meeting transcript, extract all action items.
//     For each action item, identify the task and who it is assigned to (if mentioned).
//     Format the output as a JSON array of objects. Each object should have "task" and "assignedTo" keys.
//     Example: [{"task": "Research new vendors", "assignedTo": "Alice"}]
//     If no action items are found, return an empty array [].

//     Transcript:
//     ---
//     ${fullTranscriptText}
//     ---

//     JSON Output:
//   `;
//   try {
//     const responseText = await generateWithOllama(
//       prompt,
//       "You extract action items into JSON format."
//     );
//     console.log("[Ollama Action Item Extractor] Raw response:", responseText);
//     let items = [];
//     try {
//       //
//       const jsonMatch = responseText.match(/(\[.*\]|\{.*\})/s);
//       if (jsonMatch && jsonMatch[0]) {
//         items = JSON.parse(jsonMatch[0]);
//         if (
//           !Array.isArray(items) &&
//           items.action_items &&
//           Array.isArray(items.action_items)
//         ) {
//           items = items.action_items; //
//         } else if (!Array.isArray(items)) {
//           items = []; //
//         }
//       }
//     } catch (e) {
//       console.error(
//         "[Ollama Action Item Extractor] Failed to parse JSON:",
//         e,
//         "Response:",
//         responseText
//       );
//       items = []; //
//     }
//     return items.map((item, index) => ({
//       ...item,
//       id: `ai-${Date.now() + index}`,
//       status: "pending",
//     }));
//   } catch (error) {
//     return [];
//   }
// };

// const realOpeaAgendaGenerator = async (topic, participants = []) => {
//   console.log(
//     `[Ollama Agenda Generator] Generating agenda for topic: ${topic}`
//   );
//   const participantList =
//     participants.length > 0 ? `Participants: ${participants.join(", ")}.` : "";
//   const prompt = `
//     Create a suggested meeting agenda for the topic: "${topic}".
//     ${participantList}
//     The agenda should include 3-5 key discussion points with estimated durations.
//     Format it clearly.
//   `;
//   try {
//     const agenda = await generateWithOllama(
//       prompt,
//       "You are a helpful meeting agenda generator."
//     );
//     console.log("[Ollama Agenda Generator] Agenda generated.");
//     return agenda;
//   } catch (error) {
//     return `Agenda generation failed for topic: ${topic}.`;
//   }
// };
