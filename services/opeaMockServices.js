// MOCK OPEA SERVICES - REPLACE WITH ACTUAL OPEA API/SDK CALLS

const mockOpeaSTT = async (audioDataReference) => {
  console.log(`[MOCK OPEA STT] Processing audio: ${audioDataReference}`);
  await new Promise((resolve) =>
    setTimeout(resolve, 1500 + Math.random() * 1000)
  );
  const timestamp = new Date().toLocaleTimeString();
  const speakers = ["Alice", "Bob", "Charlie", "Dana"];
  const randomSpeaker = speakers[Math.floor(Math.random() * speakers.length)];
  const sentences = [
    "This is a simulated transcript line from OPEA STT.",
    "Indeed, it's quite fascinating what OPEA can do.",
    "We should discuss the quarterly projections next.",
    "Can someone take a note of that action item?",
    "The latest OPEA models show promising results for enterprise AI.",
    "Let's circle back on the integration plan tomorrow.",
  ];
  return [
    {
      speaker: randomSpeaker,
      timestamp,
      text: sentences[Math.floor(Math.random() * sentences.length)],
    },
  ];
};

const mockOpeaSummarizer = async (fullTranscriptText) => {
  console.log("[MOCK OPEA Summarizer] Generating summary...");
  await new Promise((resolve) => setTimeout(resolve, 2000));
  const summaryEndings = [
    "Key decisions revolved around resource allocation and timeline adjustments.",
    "The main outcome was an agreement on the next phase of the project.",
    "Several critical issues were identified, requiring immediate attention.",
  ];
  return `This is an AI-generated summary of the meeting. ${
    summaryEndings[Math.floor(Math.random() * summaryEndings.length)]
  } (Generated by Mock OPEA Summarizer for: ${fullTranscriptText.substring(
    0,
    30
  )}...)`;
};

const mockOpeaActionItemExtractor = async (fullTranscriptText) => {
  console.log("[MOCK OPEA Action Item Extractor] Extracting action items...");
  await new Promise((resolve) => setTimeout(resolve, 1000));
  const tasks = [
    {
      task: "Alice to finalize the Q3 report and circulate by EOD Friday.",
      assignedTo: "Alice",
    },
    {
      task: "Bob to research alternative OPEA deployment strategies for cost optimization.",
      assignedTo: "Bob",
    },
    {
      task: "Charlie to schedule a follow-up meeting with the stakeholders next week.",
      assignedTo: "Charlie",
    },
    {
      task: "Dana to prepare the presentation slides for the upcoming client demo.",
      assignedTo: "Dana",
    },
  ];
  const numItems = Math.floor(Math.random() * 2) + 1; // 1 or 2 items
  let selectedItems = [];
  for (let i = 0; i < numItems; i++) {
    selectedItems.push({
      ...tasks[Math.floor(Math.random() * tasks.length)],
      id: `ai-${Date.now() + i}`,
      status: "pending",
    });
  }
  return selectedItems;
};

const mockOpeaAgendaGenerator = async (topic, participants) => {
  console.log(
    `[MOCK OPEA Agenda Generator] Generating agenda for topic: ${topic}`
  );
  await new Promise((resolve) => setTimeout(resolve, 1000));
  const points = [
    "Review of last meeting's action items",
    "Deep dive into " + (topic || "the main subject"),
    "Brainstorming session for new initiatives",
    "Discussion on OPEA integration challenges",
    "Planning next steps and assigning responsibilities",
  ];
  let agendaContent = `### Suggested Agenda for "${topic}"\nParticipants: ${participants.join(
    ", "
  )}\n\n`;
  for (let i = 0; i < 3; i++) {
    // Generate 3 random points
    agendaContent += `${i + 1}. **${
      points[Math.floor(Math.random() * points.length)]
    } (${Math.floor(Math.random() * 10 + 5)} min)**\n`;
  }
  agendaContent += `\n*(Generated by Mock OPEA Agenda Service)*`;
  return agendaContent;
};

module.exports = {
  mockOpeaSTT,
  mockOpeaSummarizer,
  mockOpeaActionItemExtractor,
  mockOpeaAgendaGenerator,
};
